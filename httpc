#!/usr/bin/env python

import argparse
import validators
import sys
from http_requests import get, post

def main():

    # arguments
    verbose = False
    # sys.argv += '''post -h key1:value1 -h key2:value2 -d "'hello':'hi'" http://httpbin.org/post'''.split()

    parser = argparse.ArgumentParser(add_help=False, prog="httpc")
    subparsers = parser.add_subparsers(dest="command")

    get_parser = subparsers.add_parser("get", add_help=False)
    get_parser.add_argument("-v", action="store_true")
    get_parser.add_argument("-h", metavar="KEY:VALUE", type=list, nargs=1)
    get_parser.add_argument('url', nargs='*')

    post_parser = subparsers.add_parser("post", add_help=False)
    post_parser.add_argument("-v", action="store_true")
    post_parser.add_argument("-h", metavar="KEY:VALUE", action="append", nargs=1)

    post_group = post_parser.add_mutually_exclusive_group(required=True)
    post_group.add_argument("-d", action='store', type=str)
    post_group.add_argument("-f", action="store_true")
    post_parser.add_argument('url', nargs='*')

    help_parser = subparsers.add_parser("help")
    help_parser.add_argument('help', default='None', const='None', nargs='?', choices=["get", "post", "None"])

    args = parser.parse_args()

    if args.command == "help":
        if args.help == "get":
            return get_helpFunction()
        elif args.help == "post":
            return post_helpFunction()
        elif args.help == "None":
           return httpc_helpFunction()

    elif args.command == "post":
        if len(args.url) > 0 and validate_url(args.url[0]):
            if args.v:
                verbose = True
            if args.d or args.f:
                post(args.url[0],verbose, args.d, args.h)
        else:
            print("Please input a correct URL")

    elif args.command == "get":
        if len(args.url) > 0 and validate_url(args.url[0]):
            if args.v:
                verbose = True
            if args.h:
                headers = args.h
            get(args.url[0], verbose, headers)
        else:
            print("Please input a correct URL")

    else:
        return httpc_helpFunction()


def get_helpFunction():
    print("""httpc help get\n
usage: httpc get [-v] [-h key:value] URL\n
Get executes a HTTP GET request for a given URL.\n
    -v Prints the detail of the response such as protocol, status,and headers.
    -h key:value Associates headers to HTTP Request with the format 'key:value'.""")

def post_helpFunction():
    print("""httpc help post\n
usage: httpc post [-v] [-h key:value] [-d inline-data] [-f file] URL\n
Post executes a HTTP POST request for a given URL with inline data or from file.\n
    -v Prints the detail of the response such as protocol, status, and headers.
    -h key:value Associates headers to HTTP Request with the format 'key:value'.
    -d string Associates an inline data to the body HTTP POST request.
    -f file Associates the content of a file to the body HTTP POST request.\n
Either [-d] or [-f] can be used but not both.""")

def httpc_helpFunction():
    print("""httpc help\n
httpc is a curl-like application but supports HTTP protocol only.
Usage:
        httpc command [arguments]
The commands are:
        get executes a HTTP GET request and prints the response.
        post executes a HTTP POST request and prints the response.
        help prints this screen.\n
Use "httpc help [command]" for more information about a command.""")

def validate_url(url):
    valid=validators.url(url)
    return valid

if __name__ == "__main__":
    main()