#!/usr/bin/env python

import argparse
import sys
import validators
from http_requests import request


def main():

    sys.argv += '''post -h key1:value1 -d "test" http://httpbin.org/post'''.split()
    verbose = False
    parser = argparse.ArgumentParser(add_help=False, prog="httpc")
    subparsers = parser.add_subparsers(dest="command")

    get_parser = subparsers.add_parser("get", add_help=False)
    get_parser.add_argument("-v", action="store_true")
    get_parser.add_argument("-h", default=None, metavar="KEY:VALUE", action='append', nargs=1)
    get_parser.add_argument('url', nargs=argparse.REMAINDER)

    post_parser = subparsers.add_parser("post", add_help=False)
    post_parser.add_argument("-v", action="store_true")
    post_parser.add_argument("-h", default=None, metavar="KEY:VALUE", action='append', nargs=1)
    post_parser.add_argument('url', nargs=argparse.REMAINDER)

    post_group = post_parser.add_mutually_exclusive_group(required=True)
    post_group.add_argument("-d", default=None, action="store")
    post_group.add_argument("-f", default=None, action="store_true")

    help_parser = subparsers.add_parser("help")
    help_parser.add_argument(
        'help', default='None', const='None', nargs='?', choices=["get", "post", "None"])

    args = parser.parse_args()

    if args.command == "help":
        if args.help == "get":
            return get_helpFunction()
        elif args.help == "post":
            return post_helpFunction()
        elif args.help == "None":
            return httpc_helpFunction()

    elif args.command == "post" or args.command == "get" :
        if len(args.url) > 0 and validate_url(args.url[0]):
            if args.v:
                verbose = True
            if args.command == "get":
                if args.h:
                    request(args.command.upper(), args.url[0], verbose, None, args.h)
                else:
                    request(args.command.upper(), args.url[0], verbose, None, None)
            elif args.command == "post":
                if args.d == None:
                    request(args.command.upper(), args.url[0], verbose, args.f, args.h)
                elif args.f == None:
                    request(args.command.upper(), args.url[0], verbose, args.d, args.h)
        else:
            print("Please input a correct URL" + args.url[0] + " d: " + args.d)

    else:
        return httpc_helpFunction()


def get_helpFunction():
    print("""httpc help get\n
usage: httpc get [-v] [-h key:value] URL\n
Get executes a HTTP GET request for a given URL.\n
    -v Prints the detail of the response such as protocol, status,and headers.
    -h key:value Associates headers to HTTP Request with the format 'key:value'.""")

def post_helpFunction():
    print("""httpc help post\n
usage: httpc post [-v] [-h key:value] [-d inline-data] [-f file] URL\n
Post executes a HTTP POST request for a given URL with inline data or from file.\n
    -v Prints the detail of the response such as protocol, status, and headers.
    -h key:value Associates headers to HTTP Request with the format 'key:value'.
    -d string Associates an inline data to the body HTTP POST request.
    -f file Associates the content of a file to the body HTTP POST request.\n
Either [-d] or [-f] can be used but not both.""")

def httpc_helpFunction():
    print("""httpc help\n
httpc is a curl-like application but supports HTTP protocol only.
Usage:
        httpc command [arguments]
The commands are:
        get executes a HTTP GET request and prints the response.
        post executes a HTTP POST request and prints the response.
        help prints this screen.\n
Use "httpc help [command]" for more information about a command.""")

def validate_url(url):
    valid = validators.url(url)
    return valid

if __name__ == "__main__":
    main()
